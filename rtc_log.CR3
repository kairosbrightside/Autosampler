' === Declarations ===
Public V_Pressure As Float        ' mV reading from VoltSE (converted to V later)
Public Pressure_psi As Float      ' Converted pressure
Public T1 As Long                 ' Scan counter inside states
Public State As String * 10       ' State machine
Public ScanCounter As Long        ' Start-up delay counter
Public SampleTrigger As Boolean
Public SampleID As Long

' Timekeeping
Dim RT(9) As Long                 ' RealTime array
Public HourNow As Long
Public MinuteNow As Long

' === derivative-based stopping ===
Public PrevPressure As Float
Public Deriv As Float
Public DerivSm As Float
Public DerivStreak As Long
Const DERIV_THRESH = 0.2          ' psi/sec threshold
Const DERIV_COUNT_REQ = 10        ' consecutive smoothed-deriv checks required
Const ALPHA = 0.35

' === Constants ===
Const STARTUP_DELAY_SCANS = 10    ' 10s at 1s scan rate
Const SCAN_INTERVAL_SECS = 1

' === Data Table ===
DataTable(SampleLog, True, -1)
  DataInterval(0, 0, Sec, 0)  ' Event-based logging
  Sample(1, V_Pressure, FP2)
  Sample(1, Pressure_psi, FP2)
  Sample(1, State, String)
  Sample(1, SampleID, Long)
EndTable

' === Pressure Conversion Function ===
Function VoltageToPSI(V As Float) As Float
  If V <= 1.0 Then
    VoltageToPSI = 0
  ElseIf V >= 5.0 Then
    VoltageToPSI = 145.0
  Else
    VoltageToPSI = (V - 1.0) * (145.0 / 4.0)
  EndIf
EndFunction

' === Main Program ===
BeginProg
  ' Initialize variables
  State = "WAIT"
  ScanCounter = 0
  T1 = 0
  PrevPressure = 0
  Deriv = 0
  DerivSm = 0
  DerivStreak = 0
  SampleTrigger = False
  SampleID = 0

  Scan(SCAN_INTERVAL_SECS, Sec, 0, 0)
    
    ' --- Read clock ---
    RealTime(RT())
    HourNow = RT(4)
    MinuteNow = RT(5)

    ' Reset daily trigger flag
    If TimeIntoInterval(0, 1440, Min) Then
      SampleTrigger = False
    EndIf

    ' Daily sample trigger at 14:00
    If (SampleTrigger = False) AND (HourNow = 14) AND (MinuteNow =0) Then
      SampleTrigger = True
      State = "SAMPLE"
      T1 = 0
      SampleID = SampleID + 1
    EndIf

    ' === Read pressure sensor ===
    VoltSe(V_Pressure, 1, mV5000, 1, 0, 0, 0, 1/1000, 0)  ' mV â†’ V
    Pressure_psi = VoltageToPSI(V_Pressure)

    ' === State Machine ===
    If State = "WAIT" Then
      ' Idle until time trigger

    ElseIf State = "SAMPLE" Then
      ' Pump ON (active low)
      PortSet(2, 0)
      ' Valve ON after 1 second
      If T1 >= 1 Then
        PortSet(1, 0)
      EndIf

      ' Derivative calc after 5 min
      If T1 = 0 Then
        PrevPressure = Pressure_psi
        DerivSm = 0
        DerivStreak = 0
      ElseIf T1 > 300 Then
        Deriv = (Pressure_psi - PrevPressure) / SCAN_INTERVAL_SECS
        DerivSm = (ALPHA * Deriv) + ((1 - ALPHA) * DerivSm)
        If ABS(DerivSm) <= DERIV_THRESH Then
          DerivStreak = DerivStreak + 1
        Else
          DerivStreak = 0
        EndIf
        PrevPressure = Pressure_psi
      EndIf

      ' Stop condition only from smoothing
      If (DerivStreak >= DERIV_COUNT_REQ) Then
        ' Log *one row* at the stop moment
        CallTable SampleLog
        State = "SHUTDOWN"
        T1 = 0
      EndIf

      T1 = T1 + 1

    ElseIf State = "SHUTDOWN" Then
      ' Close valve first
      PortSet(1, 1)
      If T1 >= 10 Then
        ' Pump OFF after delay
        PortSet(2, 1)
        State = "DONE"
      EndIf
      T1 = T1 + 1

    ElseIf State = "DONE" Then
      ' Idle
      PortSet(1, 1)
      PortSet(2, 1)
    EndIf

  NextScan
EndProg
