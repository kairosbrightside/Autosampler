' === Declarations ===
Public V_Pressure(1) As Float    ' Differential voltage reading
Public Pressure_psi As Float     ' Converted pressure
Public T1 As Long                ' Scan counter
Public State As String * 10      ' State machine
Public ScanCounter As Long       ' Delay before sampling

Dim PTemp As Float *System       ' Required for VoltDiff

' === Constants ===
Const PRESSURE_THRESHOLD = 41.0        ' Max pump pressure
Const TIMEOUT_SCANS = 360               ' 6 minutes (1s scan rate)
Const STARTUP_DELAY_SCANS = 1         ' 3 minutes delay before sampling

' === Data Table ===
DataTable(SampleLog, True, -1)
  Sample(1, TimeStamp(), IEEE4)
  DataInterval(0, 1, Sec, 1)
  Sample(1, V_Pressure(1), FP2)
  Sample(1, Pressure_psi, FP2)
  Sample(1, State, String)
EndTable

' === Pressure Conversion Function ===
Function VoltageToPSI(V As Float) As Float
  If V <= 1.0 Then
    VoltageToPSI = 0
  ElseIf V >= 5.0 Then
    VoltageToPSI = 145.0
  Else
    VoltageToPSI = (V - 1.0) * (145.0/4.0)  ' 145 psi across 4V span (1-5V)
  EndIf
EndFunction

' === Main Program ===
BeginProg
  State = "WAIT"
  ScanCounter = 0

  Scan(1, Sec, 0, 0)

    ' === Read Pressure Sensor on Differential Channel 1 ===
    VoltDiff(V_Pressure, 1, mV5000, 1, 0, 100, 250, PTemp, 0)
    V_Pressure(1) = V_Pressure(1) / 1000.0 
    Pressure_psi = VoltageToPSI(V_Pressure(1))

    ' === State Machine ===
    If State = "WAIT" Then
      ScanCounter = ScanCounter + 1
      If ScanCounter >= STARTUP_DELAY_SCANS Then
        State = "SAMPLE"
        T1 = 1
      EndIf

    ElseIf State = "SAMPLE" Then
      PortSet(2, 1)   ' Pump ON (C2)
      If T1 >= 1 Then
        PortSet(1, 1)   ' Valve OPEN (C1) after 10 sec delay
      EndIf

      T1 = T1 + 1
      If (Pressure_psi >= PRESSURE_THRESHOLD) OR (T1 >= TIMEOUT_SCANS) Then
        State = "SHUTDOWN"
        T1 = 0
      EndIf

    ElseIf State = "SHUTDOWN" Then
      PortSet(1, 0)   ' Close valve first
      If T1 >= 1 Then
        PortSet(2, 0)   ' Turn off pump after 10 sec delay
        State = "DONE"
      EndIf
      T1 = T1 + 1

    ElseIf State = "DONE" Then
      ' Hold idle â€” system finished
      PortSet(1, 0)
      PortSet(2, 0)
    EndIf

    ' === Logging ===
    CallTable SampleLog

  NextScan

EndProg
