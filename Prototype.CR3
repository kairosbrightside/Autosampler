' === Declarations ===
Public V_Pressure As Float
Public Pressure_psi As Float
Public T1 As Long
Public State As String * 15
Public SampleID As Long
Public LogSampleNow As Boolean
Public CurrentCan As Long
Public PurgeCount As Long

' Timekeeping
Dim RT(9) As Long
Public HourNow As Long
Public MinuteNow As Long

' === derivative-based stopping ===
Public PrevPressure As Float
Public Deriv As Float
Public DerivSm As Float
Public DerivStreak As Long
Const DERIV_THRESH = 0.3
Const DERIV_COUNT_REQ = 10
Const ALPHA = 0.3

' === Constants ===
Const SCAN_INTERVAL_SECS = 1
Const PURGE_DURATION = 300   ' 5 min purge

' === Data Table ===
DataTable(SampleLog, True, -1)
  DataInterval(0, 0, Sec, 0)
  Sample(1, V_Pressure, FP2)
  Sample(1, Pressure_psi, FP2)
  Sample(1, State, String)
  Sample(1, SampleID, Long)
  Sample(1, CurrentCan, Long)
  Sample(1, HourNow, Long)
  Sample(1, MinuteNow, Long)
EndTable

' === Pressure Conversion Function ===
Function VoltageToPSI(V As Float) As Float
  If V <= 1.0 Then
    VoltageToPSI = 0
  ElseIf V >= 5.0 Then
    VoltageToPSI = 145.0
  Else
    VoltageToPSI = (V - 1.0) * (145.0 / 4.0)
  EndIf
EndFunction

' ===== Derivative subroutine with minimum scan delay =====
Sub UpdateDerivative(Pressure As Float, ScanCount As Long, MinScans As Long)
  If ScanCount = 0 Then
    ' reset on entry
    PrevPressure = Pressure
    DerivSm = 0
    DerivStreak = 0
  ElseIf ScanCount >= MinScans Then
    Deriv = (Pressure - PrevPressure) / SCAN_INTERVAL_SECS
    DerivSm = (ALPHA * Deriv) + ((1 - ALPHA) * DerivSm)

    If ABS(DerivSm) <= DERIV_THRESH Then
      DerivStreak = DerivStreak + 1
    Else
      DerivStreak = 0
    EndIf

    PrevPressure = Pressure
  Else
    ' haven’t reached MinScans yet, just track pressure
    PrevPressure = Pressure
  EndIf
EndSub

' === Main Program ===
BeginProg
  State = "WAIT"
  T1 = 0
  PrevPressure = 0
  DerivSm = 0
  DerivStreak = 0
  SampleID = 0
  LogSampleNow = False
  CurrentCan = 0
  PurgeCount = 0

  Scan(SCAN_INTERVAL_SECS, Sec, 0, 0)

    ' --- Clock ---
    RealTime(RT())
    HourNow = RT(4)
    MinuteNow = RT(5)

    ' Trigger at 10:30, 11:30, 12:30
    If ((HourNow = 10) OR (HourNow = 11) OR (HourNow = 12)) AND (MinuteNow = 30) Then
      If CurrentCan < 3 Then
        CurrentCan = CurrentCan + 1  ' cycle 1–3
        SampleID = SampleID + 1
      EndIf
      State = "FIRST_PURGE"
      T1 = 0
      PurgeCount = 0
    EndIf

    ' --- Pressure ---
    VoltSe(V_Pressure, 1, mV5000, 1, 0, 0, 0, 1/1000, 0)
    Pressure_psi = VoltageToPSI(V_Pressure)

    ' === State Machine ===
    If State = "WAIT" Then
      ' Idle

    ElseIf State = "FIRST_PURGE" Then
      ' purge line only
      PortSet(8, 1)  ' pump ON
      PortSet(7, 1)  ' purge valve OPEN 
      If T1 = PURGE_DURATION Then
        PortSet(7, 0) 'purge valve off
        T1 = 0
        PurgeCount = 0
        State = "CAN_PURGE"
      EndIf
      T1 = T1 + 1
      
    ElseIf State = "CAN_PURGE" Then
      PortSet(8, 1)  ' pump ON
      PortSet(7, 0)  ' purge valve OFF
      If CurrentCan = 1 Then PortSet(1, 1)
      If CurrentCan = 2 Then PortSet(2, 1)
      If CurrentCan = 3 Then PortSet(3, 1)

      Call UpdateDerivative(Pressure_psi, T1, 150)

      If (DerivStreak >= DERIV_COUNT_REQ) Then
        PortSet(7, 1)     ' vent ON
        PurgeCount = PurgeCount + 1
        T1 = 0
        If PurgeCount < 2 Then
          State = "CAN_PURGE"   ' repeat purge again
        Else
          State = "SAMPLE"
        EndIf
      EndIf
      T1 = T1 + 1

    ElseIf State = "SAMPLE" Then
      PortSet(8, 1)  ' pump ON
      PortSet(7, 0)  ' purge closed
      If CurrentCan = 1 Then PortSet(1, 1)
      If CurrentCan = 2 Then PortSet(2, 1)
      If CurrentCan = 3 Then PortSet(3, 1)

      Call UpdateDerivative(Pressure_psi, T1, 150)

      If (DerivStreak >= DERIV_COUNT_REQ) OR T1 > 600 Then
        LogSampleNow = True
        State = "SHUTDOWN"
        T1 = 0
      EndIf

      T1 = T1 + 1

    ElseIf State = "SHUTDOWN" Then
      'close all valves
      PortSet(7, 0)
      PortSet(1, 0)
      PortSet(2, 0)
      PortSet(3, 0)
      If T1 >= 10 Then
        PortSet(8, 0)  ' pump OFF
        State = "WAIT"
      EndIf
      T1 = T1 + 1
    EndIf

    ' === Logging ===
    If LogSampleNow Then
      CallTable SampleLog
      CardFlush()
      LogSampleNow = False
    EndIf

  NextScan
EndProg
